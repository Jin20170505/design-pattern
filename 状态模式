设计模式之十:状态模式(State Pattern)

概述：
	在软件开发过程中，应用程序可能会根据不同的情况作出不同的处理。最直接的解决方案是将这些所有可能发生的情况全都考虑到。
	然后使用if... ellse语句来做状态判断来进行不同情况的处理。但是对复杂状态的判断就显得“力不从心了”。
	随着增加新的状态或者修改一个状体（if else(或switch case)语句的增多或者修改）可能会引起很大的修改，而程序的可读性，扩展性也会变得很弱。
	维护也会很麻烦。那么就考虑只修改自身状态的模式。
定义：
	允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。
	状态模式主要解决的是当控制一个对象状态的条件表达式过于复杂时的情况。把状态的判断逻辑转移到表示不同状态的一系列类中，可以把复杂的判断逻辑简化。

	在很多情况下，一个对象的行为取决于一个或多个动态变化的属性，这样的属性叫做状态，这样的对象叫做有状态的(stateful)对象，这样的对象状态是从事先定义好的一系列值中取出的。
当一个这样的对象与外部事件产生互动时，其内部状态就会改变，从而使得系统的行为也随之发生变化。
	
	状态模式是让各个状态对象自己知道其下一个处理的对象是谁！即在状态子类编译时在代码上就设定好了！

	
缺点：(即使缺点，也是优点)
　　使用状态模式时，每个状态对应一个具体的状态类，使结构分散，类的数量变得很多！使得程序结构变得稍显复杂，阅读代码时相对之前比较困难，
不过对于优秀的研发人员来说，应该是微不足道的。因为想要获取弹性！就必须付出代价！
除非我们的程序是一次性的！用完就丢掉……如果不是，那么假设有一个系统，某个功能需要很多状态，如果不使用状态模式优化，那么在环境类（客户端类）里会有大量的整块整块的条件判断语句！


实例:
	一个人的工作的一天。
		7点起床
		9点工作
		12点吃午饭
		13点工作
		17点下班
		19点吃晚饭
		21点学习
		23点睡觉

	分析：
		一个人根据时间的不同，来作出不同的行为。
		
	code:
		public interface State {
			public void doSomething(Person person);
		}
		
		public class Person {
			private int hours;
			private State state;
			public Person(){
				// 设置起点
				this.state = new Getup();
			}
			public void doSomething(){
				this.state.doSomething(this);
				// 状态恢复
				this.state = new Getup();
			}
			public void setHours(int hours){
				this.hours = hours;
			}
			public int getHours(){
				return hours;
			}
			public void setState(State state){
				this.state = state;
			}
		}
		
		public class Getup{
			public void doSomething(Person person){
				if(7<=person.getHours() && person.getHours()<9){
					System.out.println("起床 洗漱 吃早饭 坐班车上班。");
				}else{
					person.setState(new Morning());
					person.doSomething();
				}
			}
		}
		public class Morning{
			public void doSomething(Person person){
				if(9<=person.getHours() && person.getHours()<12){
					System.out.println("早上工作");
				}else{
					person.setState(new Noon());
					person.doSomething();
				}
			}
		}
		public class Noon{
			public void doSomething(Person person){
				if(12<=person.getHours() && person.getHours()<13){
					System.out.println("和同事一起吃午饭，午休。");
				}else{
					person.setState(new Afternoon());
					person.doSomething();
				}
			}
		}
		public class Afternoon{
			public void doSomething(Person person){
				if(13<=person.getHours() && person.getHours()<17){
					System.out.println("下午工作");
				}else{
					person.setState(new AfterWork());
					person.doSomething();
				}
			}
		}
		public class AfterWork{
			public void doSomething(Person person){
				if(17<=person.getHours() && person.getHours()<19){
					System.out.println("和朋友出去 聊聊 买菜 回家");
				}else{
					person.setState(new Evening());
					person.doSomething();
				}
			}
		}
		public class Evening{
			public void doSomething(Person person){
				if(19<=person.getHours() && person.getHours()<21){
					System.out.println("陪家人吃饭 聊天 看电视");
				}else{
					person.setState(new Study());
					person.doSomething();
				}
			}
		}
		public class Study{
			public void doSomething(Person person){
				if(21<=person.getHours() && person.getHours()<23){
					System.out.println("省己 学习 读书");
				}else{
					person.setState(new Sleep());
					person.doSomething();
				}
			}
		}
		public class Sleep{
			public void doSomething(Person person){
				System.out.println("睡觉。。。。。。。。。。。");
			}
		}
		
		public class Client{
			public static void main(String[] args){
				Person me = new Person();
				me.setHours(6);
				me.doSomething();
				
				me.setHours(20);
				me.doSomething();
				
				// 第二天10点
				me.setHours(10);
				me.doSomething();
			}
		}
	
注 ：
	状态模式和职责链模式的区别：
		1.状态模式：让各个状态对象自己知道其下一个处理的对象是谁！即在编译时在代码上就设定好了
		2.职责链模式：各个对象并不指定（也不知道）其下一个处理的对象到底是谁，只有在客户端才设定。
	
	状态模式和策略模式的区别：
		1.策略是外界给的，策略怎么变，是调用者考虑的事情，系统只是根据所给的策略做事情。系统自身并不指定或改变策略。
		2.状态是系统自身的固有的，调用者不能控制系统的状态转移.由系统自身决定。
扩展：
	有限状态机(Finite-state machine ,FSM):
		简单而言，有限状态机由一组状态、一个初始状态、输入和根据输入及现有状态转换为下一个状态的转换函数组成。
		而本文总结的State模式（状态模式）其实本质就是一种面向对象的状态机思想，可以适应非常复杂的状态管理。
	
