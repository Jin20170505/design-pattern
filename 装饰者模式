设计模式之四：装饰者模式
定义：

	装饰模式指的是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。
	它是通过创建一个包装对象，也就是装饰来包裹真实的对象。

特点：
	1.装饰对象和真实对象有相同的接口。这样客户端对象就能以和真实对象相同的方式和装饰对象交互。
	2.装饰对象包含一个真实对象的引用（reference）
	3.装饰对象接受所有来自客户端的请求。它把这些请求转发给真实的对象。
	4.装饰对象可以在转发这些请求以前或以后增加一些附加功能。
	  这样就确保了在运行时，不用修改给定对象的结构就可以在外部增加附加的功能。在面向对象的设计中，通常是通过继承来实现对给定类的功能扩展。

使用场景：
	1. 需要扩展一个类的功能，或给一个类添加附加职责。
	2. 需要动态的给一个对象添加功能，这些功能可以再动态的撤销。
	3. 需要增加由一些基本功能的排列组合而产生的非常大量的功能，从而使继承关系变的不现实。
	4. 当不能采用生成子类的方法进行扩充时。一种情况是，可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。
	另一种情况可能是因为类定义被隐藏，或类定义不能用于生成子类。

优点：
	1. Decorator模式与继承关系的目的都是要扩展对象的功能，但是Decorator可以提供比继承更多的灵活性。
	2. 通过使用不同的具体装饰类以及这些装饰类的排列组合，设计师可以创造出很多不同行为的组合。

缺点：
	1. 这种比继承更加灵活机动的特性，也同时意味着更加多的复杂性。
	2. 装饰模式会导致设计中出现许多小类，如果过度使用，会使程序变得很复杂。
	3. 装饰模式是针对抽象组件（Component）类型编程。但是，如果你要针对具体组件编程时，就应该重新思考你的应用架构，以及装饰者是否合适。当然也可以改变Component接口，
		增加新的公开的行为，实现“半透明”的装饰者模式。在实际项目中要做出最佳选择

利用到的设计原则:
	1.多用组合，少用继承。
	2.开放-闭合原则
使用典型：
	JAVA IO流是典型的装饰者模式。
	
code:
	在装饰模式中的各个角色有：
　　（1）抽象构件（Component）角色：给出一个抽象接口，以规范准备接收附加责任的对象。
　　（2）具体构件（Concrete Component）角色：定义一个将要接收附加责任的类。
　　（3）装饰（Decorator）角色：持有一个构件（Component）对象的实例，并实现一个与抽象构件接口一致的接口。
　　（4）具体装饰（Concrete Decorator）角色：负责给构件对象添加上附加的责任。
示例：
	现有一个人，要出门约会，需要精心打扮一番。穿上衬衣，西服，裤子，皮鞋。
	一开始此人刚刚起床，只穿了内衣。
code：
	// Component---抽象接口
	public interface IPlay{
		public String show();
	}
	// 具体  此类不可更改。
	public class Person implements IPlay{
		public String show(){
			return "一个即将出门约会的帅哥"
		}
	}
	
	public class TShirt_Decorator implements IPlay{
		private IPlay play;
		public TShirt_Decorator(IPlay play){
			this.play  = play;
		}
		public String show(){
			return play.show()+" 穿上T恤";
		}
	}
	
	public class Suit_Decorator implements IPlay{
		private IPlay play;
		public Suit_Decorator(IPlay play){
			this.play = play;
		}
		
		public String show(){
			return play.show()+" 穿上西服";
		}
	}

	public class Trousers_Decorator implements IPlay{
		private IPlay play;
		public Trousers_Decorator(IPlay play){
			this.play = play;
		}
		
		public String show(){
			return play.show()+" 穿上裤子";
		}
	}
	
	public class Shoes_Decorator implements IPlay{
		private IPlay play;
		public Shoes_Decorator(IPlay play){
			this.play = play;
		}
		
		public String show(){
			return play.show()+" 穿上皮鞋";
		}
	}
	
	public class Client{
		public static void main(String[] args){
			IPlay people = new Person();
			IPlay tShirt_Decorator = new TShirt_Decorator(people);
			IPlay trousers_Decorator = new Trousers_Decorator(tShirt_Decorator);
			IPlay shoes_Decorator = new Shoes_Decorator(trousers_Decorator);
			IPlay suit_Decorator  = new Suit_Decorator(shoes_Decorator);
			suit_Decorator.show();
		}
	}

与其他设计模式的区别：
1.关于新职责：适配器也可以在转换时增加新的职责，但主要目的不在此。装饰者模式主要是给
	被装饰者增加新职责的。
2.关于原接口：适配器模式是用新接口来调用原接口，原接口对新系统是不可见或者说不可用的。
	装饰者模式原封不动的使用原接口，系统对装饰的对象也通过原接口来完成使用。
	（增加新接口的装饰者模式可以认为是其变种--“半透明”装饰者）
3.关于其包裹的对象：适配器是知道被适配者的详细情况的（就是那个类或那个接口）。
	装饰者只知道其接口是什么，至于其具体类型（是基类还是其他派生类）只有在运行期间才知道
