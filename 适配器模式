设计模式之五：适配器模式

定义：
	将一个类的接口转化成客户希望的另外的一个接口。
	Adapter模式使得原来由于接口不兼容而不能一起工作的那些类一起工作。
基本概念：
	客户：需要调用我们代码的对象。
	Adapter的宗旨是：保留现有类所提供的服务，向客户提供接口，以满足客户的需求。
		将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作
说明：
	需要被适配的类、接口、对象(我们所持有的)，称为source
	最终需要输出的(我们所需要的)，称为target
	适配器称为Adapter
	
	source ----> Adapter -----> target
	
	
三种经典分类：(source以何种形式给Adapter区分)
	1.类适配器
		source被当成一个类，Adapter以继承的方式获取到现有的服务。
	2.对象适配器(常用)
		source被当作一个对象，成为Adapter的一个私有成员属性。
	3.接口(缺省)适配器
		以接口给到，在Adapter里，将source作为一个接口，实现。
		当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现
		（空方法），那么该抽象类的子类可有选择地覆盖父类的某些方法来实现需求，它适用于一个接口不想使用其所有的方法的情况。
	
示例：
	将220V的电压转化成5V的电压（手机充电器）
	
code：
	
	// 现有220V电压 现有服务不改变  遵守“开放-封闭”原则。
	public class Source220V{
		public int output220(){
			int src = 220;
			System.out.println("我是"+src+"V");
			return src;
		}
	}
	
	// 我们所需要的输出接口
	public interface ITarget{
		int output5();
	}
	
	//1.类适配器
	public class Adapter extends Source220V implements ITarget{
		public int output5(){
			int src = output220();
			System.out.println("适配器开始工作。");
			int tg = src / 44;
			System.out.println("适配完成。");
			return tg;
		}
	}
	
	// 2.对象适配器  *常用  组合的方式
	public class Adapter implements ITarget{
		private Source220V source;
		
		public Adapter(Source220V source){
			this.source = source;
		}
		
		public int output5(){
			int src = source.output220();
			System.out.println("适配器开始工作。");
			int tg = src / 44;
			System.out.println("适配完成。");
			return tg;
		}
	}
	
注意事项：
	1.适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。
	2.过多地使用适配器，会让系统非常零乱，不易整体进行把握。
		比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，
			一个系统如果太多出现这种情况，无异于一场灾难。
			因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。
